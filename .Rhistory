# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w") as file:
json.dump(processed_turnout, file, indent=4)
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
import os
import csv
import json
# Directories and URLs
datadir = "data/raw"
results_dir = "data/processed"
turnout_dir = "data/turnout"
csvfile = f"{datadir}/election_data.csv"
# Ensure directories exist
os.makedirs(datadir, exist_ok=True)
os.makedirs(results_dir, exist_ok=True)
os.makedirs(turnout_dir, exist_ok=True)
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csv_file:  # Renamed to avoid conflict
csvreader = csv.DictReader(csv_file)
for row in csvreader:
precinct_id = row['precinct_county_nce']  # Assuming precinct ID is unique
county = row['precinct_county_name']
precinct_name = row['precinct_name']
if county not in election_data:
election_data[county] = {}
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
def process_turnout_data(election_data):
"""Process the election data to calculate turnout statistics."""
processed_turnout = {}
for county, precincts in election_data.items():
processed_turnout[county] = {}
for precinct_name, data in precincts.items():
total_registered = data['total_registered']
total_turnout = data['total_turnout']
# Calculate turnout percentage (a/b * 100)
turnout_percentage = (total_turnout / total_registered) * 100 if total_registered > 0 else 0
# Store the processed data
processed_turnout[county][precinct_name] = {
"total_registered": total_registered,
"total_turnout": total_turnout,
"turnout_percentage": turnout_percentage,
"permanent_list": data['permanent_list'],
"supplementary_list": data['supplementary_list'],
"mobile_urn": data['mobile_urn']
}
# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w") as file:
json.dump(processed_turnout, file, indent=4)
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
import os
import csv
import json
# Directories and URLs
datadir = "data/raw"
results_dir = "data/processed"
turnout_dir = "data/turnout"
csvfile = f"{datadir}/election_data.csv"
# Ensure directories exist
os.makedirs(datadir, exist_ok=True)
os.makedirs(results_dir, exist_ok=True)
os.makedirs(turnout_dir, exist_ok=True)
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csv_file:  # Renamed to avoid conflict
csvreader = csv.DictReader(csv_file)
# Print the headers for debugging
print(f"CSV Headers: {csvreader.fieldnames}")
for row in csvreader:
precinct_id = row['precinct_county_name']  # Using correct column name
county = row['precinct_county_name']  # Using correct column name
precinct_name = row['precinct_name']  # Using correct column name
if county not in election_data:
election_data[county] = {}
# Ensure that you use the correct column names for 'a', 'b', 'a1', 'a2', 'a3'
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
def process_turnout_data(election_data):
"""Process the election data to calculate turnout statistics."""
processed_turnout = {}
for county, precincts in election_data.items():
processed_turnout[county] = {}
for precinct_name, data in precincts.items():
total_registered = data['total_registered']
total_turnout = data['total_turnout']
# Calculate turnout percentage (a/b * 100)
turnout_percentage = (total_turnout / total_registered) * 100 if total_registered > 0 else 0
# Store the processed data
processed_turnout[county][precinct_name] = {
"total_registered": total_registered,
"total_turnout": total_turnout,
"turnout_percentage": turnout_percentage,
"permanent_list": data['permanent_list'],
"supplementary_list": data['supplementary_list'],
"mobile_urn": data['mobile_urn']
}
# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w") as file:
json.dump(processed_turnout, file, indent=4)
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
import os
import csv
import json
# Directories and URLs
datadir = "data/raw"
results_dir = "data/processed"
turnout_dir = "data/turnout"
csvfile = f"{datadir}/election_data.csv"
# Ensure directories exist
os.makedirs(datadir, exist_ok=True)
os.makedirs(results_dir, exist_ok=True)
os.makedirs(turnout_dir, exist_ok=True)
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csv_file:  # Renamed to avoid conflict
csvreader = csv.DictReader(csv_file)
# Print the headers for debugging
print(f"CSV Headers: {csvreader.fieldnames}")
for row in csvreader:
precinct_id = row['precinct_county_name']  # Using correct column name
county = row['precinct_county_name']  # Using correct column name
precinct_name = row['precinct_name']  # Using correct column name
if county not in election_data:
election_data[county] = {}
# Ensure that you use the correct column names for 'a', 'b', 'a1', 'a2', 'a3'
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
def process_turnout_data(election_data):
"""Process the election data to calculate turnout statistics."""
processed_turnout = {}
for county, precincts in election_data.items():
processed_turnout[county] = {}
for precinct_name, data in precincts.items():
total_registered = data['total_registered']
total_turnout = data['total_turnout']
# Calculate turnout percentage (a/b * 100)
turnout_percentage = (total_turnout / total_registered) * 100 if total_registered > 0 else 0
# Store the processed data
processed_turnout[county][precinct_name] = {
"total_registered": total_registered,
"total_turnout": total_turnout,
"turnout_percentage": turnout_percentage,
"permanent_list": data['permanent_list'],
"supplementary_list": data['supplementary_list'],
"mobile_urn": data['mobile_urn']
}
# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w") as file:
json.dump(processed_turnout, file, indent=4, ensure_ascii = False))=
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csvfile:
csvreader = csv.DictReader(csvfile)
for row in csvreader:
precinct_id = row['precinct_county_nce']  # Assuming precinct ID is unique
county = decode_unicode_escapes(row['precinct_county_name'])
precinct_name = decode_unicode_escapes(row['precinct_name'])
if county not in election_data:
election_data[county] = {}
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
import os
import csv
import json
# Directories and URLs
datadir = "data/raw"
results_dir = "data/processed"
turnout_dir = "data/turnout"
csvfile = f"{datadir}/election_data.csv"
# Ensure directories exist
os.makedirs(datadir, exist_ok=True)
os.makedirs(results_dir, exist_ok=True)
os.makedirs(turnout_dir, exist_ok=True)
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csvfile:
csvreader = csv.DictReader(csvfile)
for row in csvreader:
precinct_id = row['precinct_county_nce']  # Assuming precinct ID is unique
county = decode_unicode_escapes(row['precinct_county_name'])
precinct_name = decode_unicode_escapes(row['precinct_name'])
if county not in election_data:
election_data[county] = {}
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
def process_turnout_data(election_data):
"""Process the election data to calculate turnout statistics."""
processed_turnout = {}
for county, precincts in election_data.items():
processed_turnout[county] = {}
for precinct_name, data in precincts.items():
total_registered = data['total_registered']
total_turnout = data['total_turnout']
# Calculate turnout percentage (a/b * 100)
turnout_percentage = (total_turnout / total_registered) * 100 if total_registered > 0 else 0
# Store the processed data
processed_turnout[county][precinct_name] = {
"total_registered": total_registered,
"total_turnout": total_turnout,
"turnout_percentage": turnout_percentage,
"permanent_list": data['permanent_list'],
"supplementary_list": data['supplementary_list'],
"mobile_urn": data['mobile_urn']
}
# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w") as file:
json.dump(processed_turnout, file, indent=4, ensure_ascii = False))=
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
import os
import csv
import json
# Directories and URLs
datadir = "data/raw"
results_dir = "data/processed"
turnout_dir = "data/turnout"
csvfile = f"{datadir}/election_data.csv"
# Ensure directories exist
os.makedirs(datadir, exist_ok=True)
os.makedirs(results_dir, exist_ok=True)
os.makedirs(turnout_dir, exist_ok=True)
def read_election_data():
"""Read election data from the CSV file."""
election_data = {}
with open(csvfile, newline='', encoding='utf-8') as csv_file:
csvreader = csv.DictReader(csv_file)
# Print the headers for debugging
print(f"CSV Headers: {csvreader.fieldnames}")
for row in csvreader:
precinct_id = row['precinct_county_name']  # Using correct column name
county = row['precinct_county_name']  # Using correct column name
precinct_name = row['precinct_name']  # Using correct column name
if county not in election_data:
election_data[county] = {}
# Ensure that you use the correct column names for 'a', 'b', 'a1', 'a2', 'a3'
election_data[county][precinct_name] = {
'total_registered': int(row['a']),  # Total voters (a)
'total_turnout': int(row['b']),     # Total turnout (b)
'permanent_list': int(row['a1']),   # Permanent list (a1)
'supplementary_list': int(row['a2']), # Supplementary list (a2)
'mobile_urn': int(row['a3']),       # Mobile urn (a3)
}
return election_data
def process_turnout_data(election_data):
"""Process the election data to calculate turnout statistics."""
processed_turnout = {}
for county, precincts in election_data.items():
processed_turnout[county] = {}
for precinct_name, data in precincts.items():
total_registered = data['total_registered']
total_turnout = data['total_turnout']
# Calculate turnout percentage (a/b * 100)
turnout_percentage = (total_turnout / total_registered) * 100 if total_registered > 0 else 0
# Store the processed data
processed_turnout[county][precinct_name] = {
"total_registered": total_registered,
"total_turnout": total_turnout,
"turnout_percentage": turnout_percentage,
"permanent_list": data['permanent_list'],
"supplementary_list": data['supplementary_list'],
"mobile_urn": data['mobile_urn']
}
# Save the processed turnout data to a JSON file
output_file = os.path.join(results_dir, "turnout_summary.json")
with open(output_file, "w", encoding='utf-8') as file:
json.dump(processed_turnout, file, indent=4, ensure_ascii=False)  # Fixed the extra parenthesis
print(f"Turnout summary saved to {output_file}.")
def main():
# Read the election data from the CSV
election_data = read_election_data()
# Process the election data to calculate turnout and other stats
process_turnout_data(election_data)
if __name__ == "__main__":
main()
import os
import requests
import time
datadir = "data/raw"
csvfile = f"{datadir}/election_data.csv"
csv_url = "https://prezenta.roaep.ro/parlamentare01122024/data/csv/sicpv/pv_part_cntry_s.csv"
def download_election_data():
os.makedirs(datadir, exist_ok=True)
headers = {
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}
try:
response = requests.get(csv_url, headers=headers, timeout=30)
response.raise_for_status()
with open(csvfile, "wb") as file:
file.write(response.content)
print(f"Data fetched; saved to {csvfile}")
except requests.RequestException as e:
print(f"Error: {e}")
#Run the script with process_data.py to subsequently alter the turnout and overall results
def run_process_data():
"""Run the process_data.py script to process the downloaded CSV data."""
try:
print("Processing the downloaded election data...")
subprocess.run(['python', 'process_data.py'], check=True)
print("Processing complete.")
except subprocess.CalledProcessError as e:
print(f"Error running process_data.py: {e}")
def automate_data_fetching():
while True:
download_election_data()
run_process_data()
time.sleep(300)
if __name__ == "__main__":
automate_data_fetching()
import os
import requests
import time
datadir = "data/raw"
csvfile = f"{datadir}/election_data.csv"
csv_url = "https://prezenta.roaep.ro/parlamentare01122024/data/csv/sicpv/pv_part_cntry_s.csv"
def download_election_data():
os.makedirs(datadir, exist_ok=True)
headers = {
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}
try:
response = requests.get(csv_url, headers=headers, timeout=30)
response.raise_for_status()
with open(csvfile, "wb") as file:
file.write(response.content)
print(f"Data fetched; saved to {csvfile}")
except requests.RequestException as e:
print(f"Error: {e}")
#Run the script with process_data.py to subsequently alter the turnout and overall results
def run_process_data():
"""Run the process_data.py script to process the downloaded CSV data."""
try:
print("Processing the downloaded election data...")
subprocess.run(['python', 'process_data.py'], check=True)
print("Processing complete.")
except subprocess.CalledProcessError as e:
print(f"Error running process_data.py: {e}")
def automate_data_fetching():
while True:
download_election_data()
run_process_data()
time.sleep(300)
if __name__ == "__main__":
automate_data_fetching()
import os
import requests
import time
import subprocess
datadir = "data/raw"
csvfile = f"{datadir}/election_data.csv"
csv_url = "https://prezenta.roaep.ro/parlamentare01122024/data/csv/sicpv/pv_part_cntry_s.csv"
def download_election_data():
os.makedirs(datadir, exist_ok=True)
headers = {
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}
try:
response = requests.get(csv_url, headers=headers, timeout=30)
response.raise_for_status()
with open(csvfile, "wb") as file:
file.write(response.content)
print(f"Data fetched; saved to {csvfile}")
except requests.RequestException as e:
print(f"Error: {e}")
#Run the script with process_data.py to subsequently alter the turnout and overall results
def run_process_data():
"""Run the process_data.py script to process the downloaded CSV data."""
try:
print("Processing the downloaded election data...")
subprocess.run(['python', 'process_data.py'], check=True)
print("Processing complete.")
except subprocess.CalledProcessError as e:
print(f"Error running process_data.py: {e}")
def automate_data_fetching():
while True:
download_election_data()
run_process_data()
time.sleep(300)
if __name__ == "__main__":
automate_data_fetching()
import os
import requests
import time
import subprocess
datadir = "data/raw"
csvfile = f"{datadir}/election_data.csv"
csv_url = "https://prezenta.roaep.ro/parlamentare01122024/data/csv/sicpv/pv_part_cntry_s.csv"
def download_election_data():
os.makedirs(datadir, exist_ok=True)
headers = {
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}
try:
response = requests.get(csv_url, headers=headers, timeout=30)
response.raise_for_status()
with open(csvfile, "wb") as file:
file.write(response.content)
print(f"Data fetched; saved to {csvfile}")
except requests.RequestException as e:
print(f"Error: {e}")
#Run the script with process_data.py to subsequently alter the turnout and overall results
def run_process_data():
"""Run the process_data.py script to process the downloaded CSV data."""
try:
print("Processing the downloaded election data...")
subprocess.call(['python', 'process_data.py'], check=True)
print("Processing complete.")
except subprocess.CalledProcessError as e:
print(f"Error running process_data.py: {e}")
def automate_data_fetching():
while True:
download_election_data()
run_process_data()
time.sleep(300)
if __name__ == "__main__":
automate_data_fetching()
subprocess_call()
import subprocess
print(subprocess.__version__)
import subprocess
# Run a simple command like 'echo' and capture the output
result = subprocess.run(['echo', 'Hello, world!'], capture_output=True, text=True)
# Print the captured output
print(result.stdout)
import subprocess
# Run a simple command like 'echo' and capture the output
result = subprocess.run(['echo', 'Hello, world!'], capture_output=True, text=True)
# Print the captured output
print(result.stdout)
pip install subprocess
pip
pip install
pip install aaa
install.packages("subprocess")
py_install("subprocess")
py_run_string("!pip list")
